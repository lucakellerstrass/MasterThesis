package kellerstrass.marketInformation.test;

import kellerstrass.marketInformation.CurveModelData;
import net.finmath.optimizer.SolverException;

public class CurveModelDataMarketTest {

	public static void main(String[] args) throws SolverException {

		String[] dataDays = { "12.09.2018", "13.09.2018", "14.09.2018", "17.09.2018" };

		// Go through the data days and look if the calibration Information is loaded
		// correctly
		for (String day : dataDays) {
			CurveModelData curveModelData = new CurveModelData(day);
			printCurveModelData(curveModelData);
		}
		
	
		

	}

/**
 * This is the toSring method to be for the CalibrationInformation
 * 
 * @param calibrationInformation
 */
private static void printCurveModelData(CurveModelData curveModelData) {
	System.out.println("printCurveModelData started " +"\n");

	
	double[] times = new double[] { 0.00273972602739726, 0.512328767123288, 0.589041095890411,
			0.673972602739726, 0.761643835616438, 1.01095890410959, 1.26027397260274,
			1.50958904109589, 1.75890410958904, 2.00821917808219, 2.26027397260274,
			2.50684931506849, 2.75616438356164, 3.00821917808219, 3.26027397260274,
			3.50684931506849, 3.75616438356164, 4.00821917808219, 4.26027397260274,
			4.50958904109589, 4.75890410958904, 5.01095890410959, 5.26301369863014,
			5.50958904109589, 5.75890410958904, 6.01643835616438, 6.26849315068493,
			6.51506849315069, 6.76438356164384, 7.01369863013699, 7.26575342465753,
			7.51232876712329, 7.76164383561644, 8.01095890410959, 8.26301369863014,
			8.51232876712329, 8.76164383561644, 9.01369863013699, 9.26575342465753,
			9.51232876712329, 9.76164383561644, 10.013698630137, 10.2657534246575,
			10.5123287671233, 10.7616438356164, 11.013698630137, 11.2657534246575,
			11.5123287671233, 11.7616438356164, 12.0191780821918, 12.2712328767123,
			12.5205479452055, 12.7698630136986, 13.0219178082192, 13.2739726027397,
			13.5205479452055, 13.7698630136986, 14.0219178082192, 14.2739726027397,
			14.5205479452055, 14.7698630136986, 15.0164383561644, 16.0164383561644,
			17.0191780821918, 18.0191780821918, 19.0191780821918, 20.0191780821918,
			21.0219178082192, 22.0219178082192, 23.0219178082192, 24.0219178082192,
			25.0246575342466, 26.0246575342466, 27.0246575342466, 28.0246575342466,
			29.027397260274, 30.027397260274, 31.027397260274, 32.027397260274,
			33.0301369863014, 34.0301369863014, 35.0301369863014, 36.0301369863014,
			37.0328767123288, 38.0328767123288, 39.0328767123288, 40.0383561643836,
			41.041095890411, 42.041095890411, 43.041095890411, 44.041095890411,
			45.0438356164384, 46.0438356164384, 47.0438356164384, 48.0438356164384,
			49.0465753424658, 50.041095890411, 51.041095890411, 52.041095890411,
			53.0438356164384, 54.0438356164384, 55.0438356164384, 56.0438356164384,
			57.0465753424658, 58.0465753424658, 59.0465753424658, 60.0465753424658 };
	

	
	int length = times.length;
	

	System.out.println("time " + "\t             " + "discount value");
	for (int i = 0; i < length; i++) {
		System.out.println(times[i] + "\t" + 	curveModelData.getDiscountCurve().getDiscountFactor(times[i]));
	}

}
}
